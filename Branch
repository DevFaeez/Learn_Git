0. Pengenalan Branching

● Saat ini, hampir semua VCS pasti memiliki fitur branching
● Branching artinya kita membuat timeline baru yang berbeda dari timeline utama
● Biasanya timeline utama, atau branch utama disebut dengan master atau main
● Saat kita membuat timeline branch baru, semua perubahan yang kita lakukan tidak akan merusak timeline branch utama
● Oleh karena itu fitur branching itu sangat cocok digunakan misal ketika akan menambah fitur di Repository, sehingga jika ternyata bermasalah, kita tinggal mudah pindah ke timeline utama
● Tidak ada batasan berapa banyak branch yang bisa kita buat di Git, kita bisa bebas membuat branch dari branch manapun

///////////////////////////////////////////

1. BIla Branch Digunakan?

● Dalam pengembanngan perangkat lunak, Branch biasanya dibuat ketika kita akan menambah fitur baru
● Fitur baru akan ditambahkan di branch baru, sehingga kita bisa bebas menambah fitur tanpa takut melakukan kesalahan di branch utama
● Ketika fitur sudah siap, kita bisa melakukan merge (menggabungkan) branch fitur baru tersebut ke branch utama

///////////////////////////////////////

2. Membuat Branch

● Untuk membuat branch baru, caranya sangat mudah, kita bisa gunakan perintah :
  git branch namabranchbaru
● Saat kita buat branch baru, secara otomatis branch baru akan dimulai dari posisi branch kita saat ini, jika misal kita membuat branch baru ketika posisi kita sedang di branch master, maka branch 
baru tersebut akan dibuat dari branch master

////////////////////////////////////////////////

3. Pindah ke Branch Lain

● Setelah kita membuat branch baru, kita tidak secara otomatis akan pindah branch
● Untuk pindah ke branch lain, kita perlu lakukan secara manual
● Caranya kita bisa gunakan perintah :
  git switch namabranch
  git checkout namabranch

//////////////////////////////////////////////

4.Mengubah Nama Branch

● Jika kita melakukan kesalahan pembuatan nama branch, kita juga bisa lakukan perubahan nama branch
● Namun untuk melakukannya, kita perlu pindah terlebih dahulu ke branch yang ingin kita ubah namanya
● Setelah pindah branch yang ingin diubah nama, kita bisa gunakan perintah :
  git branch -m namabranchbaru

//////////////////////////////////////////////

5. Menghapus Branch
● Jika sebuah branch sudah tidak digunakan lagi, idealnya kita perlu menghapus branch tersebut
● Untuk menghapus branch, kita perlu keluar terlebih dahulu dari branch tersebut
● Lalu gunakan perintah :
  git branch -d namabranch
  git branch --delete namabranch

//////////////////////////////////////////////

6. Merge

● Merge adalah proses dimana kita melakukan penggabungan dua buah branch
● Merge biasanya dilakukan setelah kita selesai membuat kode program di sebuah branch, dan ingin menggabungkan fitur tersebut ke branch lain, misal ke branch utama
● Saat kita melakukan merge, branch tidak akan dihapus, artinya kita masih tetap bisa melakukan commit di branch yang ada
● Jika kita ingin menghapus branch yang sudah di merge, kita perlu lakukan secara manual

////////////////////////////////////////////

7.Melakukan Merge

● Untuk melakukan merge, pertama kita perlu pindah ke branch dimana kita lokasi merge akan dilakukan
● Selanjutnya gunakan perintah :
  git merge namabranch
● Artinya branch dari namabranch akan di merge ke dalam branch saat ini kita berada

///////////////////////////////////////////////

8.Merge Conflict

● Dalam pembuatan aplikasi, biasanya setiap programmer akan melakukan penambahkan kode program di Repository secara parallel
● Biasanya tiap programmer akan membuat branch masing-masing
● Dan tidak bisa dihindari, kadang programmer akan melakukan perubahan pada kode file yang sama di branch berbeda
● Dan biasanya ketika melakukan merge, akan terjadi yang namanya conflict
● Hal ini disebabkan, satu file diubah di branch yang berbeda, sehingga ketika di merge, kita perlu melakukan yang namanya Merge Conflict

////////////////////////////////////////////

9.Membatalkan Conflict

● Jika terjadi conflict, maka kita wajib memperbaikinya terlebih dahulu
● Semua perubahan yang tidak konflik akan secara otomatis berada di Staging Index
● Sedangkan perubahan yang konflik akan secara otomatis berada di Working Directory
● Jika kita ingin membatalkan merge, kita bisa gunakan perintah :
  git merge --abort
● Secara otomatis semua perubahan di branch yang ingin kita merge akan dihapus

//////////////////////////////////////////

10.Cherry Pick

● Kadang ada kasus, ketika kita membuat kode program di sebuah branch kita ingin melakukan merge, namun tidak ingin melakukan merge semua branch nya, mungkin hanya sebagian commit saja
● Cherry Pick merupakan fitur yang digunakan untuk mengambil commit dari branch manapun dan kita merge ke dalam branch saat ini

/////////////////////////////////////////

11.Melakukan Cherry Pick

● Misal sekarang kita ingin melakukan merge branch feature/c, namun kita tidak ingin merge semua perubahan
● Misal saja kita hanya ingin melakukan merge perubahan di file1.txt dan file3.txt
● Maka kita bisa melakukan cherry pick untuk commit perubahan tersebut, caranya gunakan perintah :
  git cherry-pick commitId





























